name: Test Smart Recipe Runner

on:
  workflow_dispatch:
    inputs:
      recipe:
        description: 'Recipe to test'
        required: true
        default: 'recipe_example'
      test_mode:
        description: 'Test mode'
        required: false
        type: choice
        options:
          - dry-run
          - config-check
          - validation
        default: 'dry-run'

env:
  GADI_USER: ${{ secrets.GADI_USER }}
  GADI_KEY: ${{ secrets.GADI_KEY }}
  SCRIPTS_DIR: ${{ secrets.GADI_SCRIPTS_DIR }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  test-dry-run:
    if: ${{ github.event.inputs.test_mode == 'dry-run' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Test Recipe (Dry Run)
        uses: ACCESS-NRI/smart-recipe-runner@v1
        with:
          recipe: ${{ github.event.inputs.recipe }}
          mode: dry-run
          esmvaltool_version: main
      
      - name: Validate Dry Run
        run: |
          echo "‚úÖ Dry run completed successfully"
          echo "üìã PBS script was generated but not submitted"
          echo "üîç Check the action logs for the generated PBS script"

  test-config-check:
    if: ${{ github.event.inputs.test_mode == 'config-check' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Test Configuration Management
        id: config-test
        uses: ACCESS-NRI/smart-recipe-runner@v1
        with:
          recipe: ${{ github.event.inputs.recipe }}
          mode: config-check
          force_config_regeneration: 'true'
      
      - name: Validate Configuration
        run: |
          echo "‚úÖ Configuration check completed"
          echo "Status: ${{ steps.config-test.outputs.config_status }}"
          echo "Resource Group: ${{ steps.config-test.outputs.resource_group }}"
          
          if [ -f ".github/config/repository-config.yml" ]; then
            echo "üìÑ Configuration file generated successfully"
            echo "üìä Analyzing configuration..."
            python3 -c "
            import yaml
            with open('.github/config/repository-config.yml', 'r') as f:
                config = yaml.safe_load(f)
            print(f'Total recipes: {len(config.get(\"recipes\", []))}')
            groups = {}
            for recipe in config.get('recipes', []):
                group = recipe.get('group', 'unknown')
                groups[group] = groups.get(group, 0) + 1
            print('Resource groups:')
            for group, count in groups.items():
                print(f'  {group}: {count} recipes')
            "
          else
            echo "‚ùå Configuration file not found"
          fi

  test-validation:
    if: ${{ github.event.inputs.test_mode == 'validation' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Validate Action Structure
        run: |
          echo "üîç Validating Smart Recipe Runner structure..."
          
          # Check if action.yml exists and is valid
          if [ -f "action.yml" ]; then
            echo "‚úÖ action.yml found"
            python3 -c "import yaml; yaml.safe_load(open('action.yml'))" && echo "‚úÖ action.yml is valid YAML"
          else
            echo "‚ùå action.yml not found"
            exit 1
          fi
          
          # Check required scripts
          if [ -f "lib/config-manager.py" ]; then
            echo "‚úÖ config-manager.py found"
          else
            echo "‚ùå config-manager.py not found"
            exit 1
          fi
          
          if [ -f "lib/recipe-runner.py" ]; then
            echo "‚úÖ recipe-runner.py found"
          else
            echo "‚ùå recipe-runner.py not found"
            exit 1
          fi
          
          echo "üéØ All validation checks passed!"
