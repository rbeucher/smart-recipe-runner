name: Batch Recipe Execution - Multiple Strategies

on:
  workflow_dispatch:
    inputs:
      execution_strategy:
        description: 'Execution strategy'
        required: true
        type: choice
        options:
          - matrix  # Use GitHub matrix strategy (recommended)
          - sequential  # Run recipes one by one
          - batch  # Run all recipes as single job
        default: matrix
      recipe_selection:
        description: 'Recipe selection method'
        required: false
        type: choice
        options:
          - all  # All recipes
          - by_pattern  # Filter by pattern
          - by_group  # Filter by resource group
          - custom_list  # Comma-separated list
        default: all
      recipe_filter:
        description: 'Recipe filter (used with by_pattern or custom_list)'
        required: false
        type: string
        default: 'recipe_example,recipe_test'
      resource_group:
        description: 'Resource group filter (used with by_group)'
        required: false
        type: choice
        options:
          - all
          - small
          - medium
          - large
          - extra-large
        default: all
      esmvaltool_version:
        description: 'ESMValTool version'
        required: false
        type: choice
        options:
          - main
          - v2.8.0
          - develop
        default: main

env:
  GADI_USER: ${{ secrets.GADI_USER }}
  GADI_KEY: ${{ secrets.GADI_KEY }}
  SCRIPTS_DIR: ${{ secrets.GADI_SCRIPTS_DIR }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # Strategy 1: Matrix Execution (Recommended)
  matrix-setup:
    name: Setup Matrix Execution
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.execution_strategy == 'matrix' }}
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
      total-recipes: ${{ steps.generate-matrix.outputs.total_recipes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Generate Execution Matrix
        id: generate-matrix
        uses: ACCESS-NRI/smart-recipe-runner@v1
        with:
          recipe: all
          mode: config-check
          generate_matrix: true
          recipe_filter: ${{ github.event.inputs.recipe_selection == 'by_pattern' && github.event.inputs.recipe_filter || (github.event.inputs.recipe_selection == 'custom_list' && github.event.inputs.recipe_filter || '.*') }}
          resource_filter: ${{ github.event.inputs.recipe_selection == 'by_group' && github.event.inputs.resource_group || 'all' }}
          max_parallel: 10
          force_config_regeneration: true

  matrix-execute:
    name: üß™ ${{ matrix.group }} - ${{ matrix.recipe }}
    runs-on: ubuntu-latest
    needs: matrix-setup
    if: ${{ needs.matrix-setup.outputs.total-recipes > 0 }}
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix: ${{ fromJson(needs.matrix-setup.outputs.matrix) }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Execute Recipe
        id: execute
        uses: ACCESS-NRI/smart-recipe-runner@v1
        with:
          recipe: ${{ matrix.recipe }}
          mode: run-only
          esmvaltool_version: ${{ github.event.inputs.esmvaltool_version }}
        continue-on-error: true
      
      - name: Recipe Result
        run: |
          echo "üìä Recipe: ${{ matrix.recipe }}"
          echo "üè∑Ô∏è  Group: ${{ matrix.group }}"
          echo "üìã Status: ${{ steps.execute.outputs.status }}"
          if [ "${{ steps.execute.outputs.status }}" != "success" ]; then
            echo "‚ùå Failed"
            exit 1
          fi

  # Strategy 2: Sequential Execution
  sequential-execute:
    name: Sequential Recipe Execution
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.execution_strategy == 'sequential' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Get Recipe List
        id: recipe-list
        uses: ACCESS-NRI/smart-recipe-runner@v1
        with:
          recipe: all
          mode: config-check
          generate_matrix: true
          recipe_filter: ${{ github.event.inputs.recipe_selection == 'by_pattern' && github.event.inputs.recipe_filter || (github.event.inputs.recipe_selection == 'custom_list' && github.event.inputs.recipe_filter || '.*') }}
          resource_filter: ${{ github.event.inputs.recipe_selection == 'by_group' && github.event.inputs.resource_group || 'all' }}
      
      - name: Execute Recipes Sequentially
        shell: bash
        run: |
          echo "üîÑ Starting sequential execution..."
          RECIPES=$(echo '${{ steps.recipe-list.outputs.filtered_recipes }}' | jq -r '.[]')
          TOTAL=$(echo '${{ steps.recipe-list.outputs.total_recipes }}')
          
          echo "üìã Found $TOTAL recipes to execute"
          
          SUCCESS=0
          FAILED=0
          
          for recipe in $RECIPES; do
            echo ""
            echo "üß™ Executing recipe: $recipe"
            
            if python3 -c "
              import sys
              import subprocess
              
              result = subprocess.run([
                'python3', '${{ github.action_path }}/lib/recipe-runner.py',
                '--recipe', '$recipe',
                '--esmvaltool-version', '${{ github.event.inputs.esmvaltool_version }}',
                '--mode', 'run-only'
              ], capture_output=True, text=True)
              
              if result.returncode == 0:
                print('‚úÖ Success')
                sys.exit(0)
              else:
                print('‚ùå Failed:', result.stderr)
                sys.exit(1)
            "; then
              echo "‚úÖ Recipe $recipe completed successfully"
              SUCCESS=$((SUCCESS + 1))
            else
              echo "‚ùå Recipe $recipe failed"
              FAILED=$((FAILED + 1))
            fi
          done
          
          echo ""
          echo "üìà Sequential Execution Summary:"
          echo "‚úÖ Successful: $SUCCESS"
          echo "‚ùå Failed: $FAILED"
          echo "üìä Total: $((SUCCESS + FAILED))"
          
          if [ $FAILED -gt 0 ]; then
            echo "‚ö†Ô∏è  Some recipes failed"
            exit 1
          fi

  # Strategy 3: Batch Execution (All recipes in single job)
  batch-execute:
    name: Batch Recipe Execution
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.execution_strategy == 'batch' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Execute All Recipes
        uses: ACCESS-NRI/smart-recipe-runner@v1
        with:
          recipe: batch_all  # Special mode for batch execution
          mode: setup-and-run
          esmvaltool_version: ${{ github.event.inputs.esmvaltool_version }}
          recipe_filter: ${{ github.event.inputs.recipe_selection == 'by_pattern' && github.event.inputs.recipe_filter || (github.event.inputs.recipe_selection == 'custom_list' && github.event.inputs.recipe_filter || '.*') }}
          resource_filter: ${{ github.event.inputs.recipe_selection == 'by_group' && github.event.inputs.resource_group || 'all' }}

  # Summary job
  summary:
    name: Execution Summary
    runs-on: ubuntu-latest
    needs: [matrix-setup, matrix-execute, sequential-execute, batch-execute]
    if: always()
    steps:
      - name: Report Results
        run: |
          echo "üéØ Batch Execution Summary"
          echo "========================="
          echo "Strategy: ${{ github.event.inputs.execution_strategy }}"
          echo "Selection: ${{ github.event.inputs.recipe_selection }}"
          
          if [ "${{ github.event.inputs.execution_strategy }}" = "matrix" ]; then
            if [ "${{ needs.matrix-execute.result }}" = "success" ]; then
              echo "‚úÖ Matrix execution completed successfully"
              echo "Total recipes: ${{ needs.matrix-setup.outputs.total-recipes }}"
            else
              echo "‚ùå Matrix execution had failures"
            fi
          elif [ "${{ github.event.inputs.execution_strategy }}" = "sequential" ]; then
            if [ "${{ needs.sequential-execute.result }}" = "success" ]; then
              echo "‚úÖ Sequential execution completed successfully"
            else
              echo "‚ùå Sequential execution had failures"
            fi
          elif [ "${{ github.event.inputs.execution_strategy }}" = "batch" ]; then
            if [ "${{ needs.batch-execute.result }}" = "success" ]; then
              echo "‚úÖ Batch execution completed successfully"
            else
              echo "‚ùå Batch execution failed"
            fi
          fi
          
          echo ""
          echo "üìä Strategy Comparison:"
          echo "‚Ä¢ Matrix: Best for parallel execution, individual failure handling"
          echo "‚Ä¢ Sequential: Best for resource-constrained environments"
          echo "‚Ä¢ Batch: Best for simple all-or-nothing execution"
