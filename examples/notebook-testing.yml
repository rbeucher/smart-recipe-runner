# Example GitHub Actions workflow for testing Jupyter notebooks
# Demonstrates various notebook testing scenarios

name: Jupyter Notebook Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly to catch environment drift
    - cron: '0 2 * * 1'

jobs:
  # Test COSIMA ocean analysis notebooks
  cosima-notebooks:
    runs-on: ubuntu-latest
    name: Test COSIMA Recipes
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Test COSIMA Appetisers
        uses: ./
        with:
          mode: 'notebook'
          repository_url: 'https://github.com/COSIMA/cosima-recipes'
          notebook_categories: 'appetisers'
          notebook_mode: 'test'
          max_parallel: 2
          continue_on_error: true
          timeout: 1800  # 30 minutes
          
      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cosima-test-report
          path: smart-runner-report.json
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('smart-runner-report.json')) {
              const report = JSON.parse(fs.readFileSync('smart-runner-report.json', 'utf8'));
              const summary = `üß™ **Notebook Test Results**: ${report.summary.notebooks.successful}/${report.summary.notebooks.total} notebooks passed`;
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }

  # Test NCAR educational notebooks
  ncar-tutorials:
    runs-on: ubuntu-latest
    name: Test NCAR Python Tutorials
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Test Basic Tutorials
        uses: ./
        with:
          mode: 'notebook'
          repository_url: 'https://github.com/NCAR/python-tutorial'
          notebook_categories: 'basics,meteorology'
          notebook_mode: 'validate'  # Faster validation mode
          max_parallel: 3
          
  # Matrix testing across multiple repositories
  matrix-notebook-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository: 
          - repo_url: 'https://github.com/COSIMA/cosima-recipes'
            categories: 'appetisers,tutorials'
            timeout: 1800
          - repo_url: 'https://github.com/NCAR/python-tutorial'
            categories: 'basics,visualization'
            timeout: 1200
        
    name: Test ${{ matrix.repository.repo_url }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Test Notebooks
        uses: ./
        with:
          mode: 'notebook'
          repository_url: ${{ matrix.repository.repo_url }}
          notebook_categories: ${{ matrix.repository.categories }}
          notebook_mode: 'test'
          max_parallel: 2
          timeout: ${{ matrix.repository.timeout }}

  # Combined ESMValTool recipe and notebook testing
  combined-testing:
    runs-on: ubuntu-latest
    name: Combined Recipe and Notebook Testing
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Test Recipe with Notebooks
        uses: ./
        with:
          mode: 'both'
          recipe_name: 'recipe_python.yml'
          repository_url: 'https://github.com/COSIMA/cosima-recipes'
          notebook_categories: 'appetisers'
          config: |
            {
              "rootpath": {"default": "/tmp/esmvaltool_output"},
              "offline": true
            }
          dry_run: true  # Safe for CI environment
          
      - name: Show combined report
        run: |
          if [ -f "smart-runner-report.json" ]; then
            echo "üìä Combined Test Report:"
            jq -r '.summary | to_entries[] | "\(.key): \(.value)"' smart-runner-report.json
          fi

  # Dry-run testing for validation
  notebook-validation:
    runs-on: ubuntu-latest
    name: Notebook Validation (No Execution)
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Validate Notebook Structure
        uses: ./
        with:
          mode: 'notebook'
          repository_url: 'https://github.com/COSIMA/cosima-recipes'
          notebook_categories: 'all'
          notebook_mode: 'dry-run'  # No execution, just validation
          
  # Performance testing with resource monitoring
  notebook-performance:
    runs-on: ubuntu-latest
    name: Notebook Performance Testing
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup monitoring
        run: |
          # Install system monitoring tools
          sudo apt-get update
          sudo apt-get install -y htop iotop
          
      - name: Test with monitoring
        uses: ./
        with:
          mode: 'notebook'
          repository_url: 'https://github.com/COSIMA/cosima-recipes'
          notebook_categories: 'appetisers'
          notebook_mode: 'test'
          max_parallel: 1  # Single execution for clean metrics
          timeout: 3600
          
      - name: Collect performance metrics
        if: always()
        run: |
          echo "üíª System resources after notebook testing:"
          free -h
          df -h
          
          # Extract performance data from report
          if [ -f "smart-runner-report.json" ]; then
            echo "üìà Notebook execution metrics:"
            jq -r '.notebook_results.execution_times // {}' smart-runner-report.json
          fi

  # Failure analysis and recovery testing
  failure-handling:
    runs-on: ubuntu-latest
    name: Test Error Handling
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Test with error continuation
        uses: ./
        with:
          mode: 'notebook'
          repository_url: 'https://github.com/COSIMA/cosima-recipes'
          notebook_categories: 'mains'  # More complex notebooks likely to have issues
          notebook_mode: 'test'
          continue_on_error: true  # Continue even if some notebooks fail
          max_parallel: 2
          
      - name: Analyze failures
        if: always()
        run: |
          if [ -f "smart-runner-report.json" ]; then
            echo "üîç Failure analysis:"
            jq -r '.notebook_results.failed_notebooks // [] | .[] | "‚ùå \(.notebook): \(.error)"' smart-runner-report.json
            
            echo "‚úÖ Success rate:"
            jq -r '.notebook_results | "Success rate: \(.successful)/\(.total_notebooks) (\((.successful/.total_notebooks)*100 | round)%)"' smart-runner-report.json
          fi
