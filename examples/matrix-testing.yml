name: Matrix Testing Example

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # ESMValTool recipes with different versions
          - recipe_type: 'esmvaltool'
            recipe_name: 'recipe_python.yml'
            esmvaltool_version: 'main'
            description: 'Python diagnostics (main)'
            
          - recipe_type: 'esmvaltool'
            recipe_name: 'recipe_ocean_example.yml'
            esmvaltool_version: 'v2.12.0'
            description: 'Ocean analysis (v2.12.0)'
            
          - recipe_type: 'esmvaltool'
            recipe_name: 'recipe_climate.yml'
            esmvaltool_version: 'latest'
            description: 'Climate analysis (latest)'
            
          # COSIMA recipes
          - recipe_type: 'cosima'
            recipe_name: 'ocean_temperature_analysis'
            repository_url: 'https://github.com/COSIMA/cosima-recipes'
            description: 'COSIMA ocean temperature'
            
          - recipe_type: 'cosima'
            recipe_name: 'mixed_layer_depth'
            repository_url: 'https://github.com/COSIMA/cosima-recipes'
            description: 'COSIMA mixed layer depth'
            
      fail-fast: false  # Continue testing other recipes even if one fails
      max-parallel: 3   # Limit concurrent jobs
      
    name: ${{ matrix.description }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Generate PBS Script
        id: generate
        uses: rbeucher/smart-recipe-runner@main
        with:
          recipe_type: ${{ matrix.recipe_type }}
          recipe_name: ${{ matrix.recipe_name }}
          esmvaltool_version: ${{ matrix.esmvaltool_version }}
          repository_url: ${{ matrix.repository_url }}
          config: |
            {
              "rootpath": {
                "CMIP6": "/g/data/ks32/CMIP6",
                "OBS": "/g/data/ks32/obs"
              },
              "output_dir": "/scratch/$USER/esmvaltool_output"
            }
            
      - name: Validate PBS Script
        run: |
          echo "Generated PBS script: ${{ steps.generate.outputs.pbs_filename }}"
          echo "Status: ${{ steps.generate.outputs.status }}"
          
          # Check that PBS script was created
          if [ ! -f "${{ steps.generate.outputs.pbs_filename }}" ]; then
            echo "Error: PBS script not found"
            exit 1
          fi
          
          # Basic validation of PBS script content
          if ! grep -q "#PBS" "${{ steps.generate.outputs.pbs_filename }}"; then
            echo "Error: Invalid PBS script format"
            exit 1
          fi
          
          echo "âœ… PBS script validation passed"
          
      - name: Upload PBS Script
        uses: actions/upload-artifact@v4
        with:
          name: pbs-script-${{ matrix.recipe_type }}-${{ matrix.recipe_name }}
          path: ${{ steps.generate.outputs.pbs_filename }}
          retention-days: 7

  # Optional: Submit jobs to HPC (commented out for safety)
  # submit-jobs:
  #   needs: test-matrix
  #   runs-on: ubuntu-latest
  #   if: success()
  #   steps:
  #     - name: Submit to HPC
  #       uses: ACCESS-NRI/ssh-action@v1
  #       with:
  #         host: 'gadi.nci.org.au'
  #         username: ${{ secrets.GADI_USERNAME }}
  #         key: ${{ secrets.GADI_SSH_KEY }}
  #         script: |
  #           cd /scratch/$USER/scripts
  #           # Submit all generated PBS scripts
  #           for pbs_file in launch_*.pbs; do
  #             if [ -f "$pbs_file" ]; then
  #               echo "Submitting: $pbs_file"
  #               qsub "$pbs_file"
  #             fi
  #           done

  summary:
    needs: test-matrix
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Matrix Testing Summary
        run: |
          echo "## Matrix Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Total recipes tested: ${{ strategy.job-total }}" >> $GITHUB_STEP_SUMMARY
          echo "- Successful: ${{ needs.test-matrix.result == 'success' && strategy.job-total || 'See individual job results' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.test-matrix.result }}" >> $GITHUB_STEP_SUMMARY
