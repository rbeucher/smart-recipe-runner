name: 'Smart Recipe Runner'
description: 'Generate and optionally submit PBS scripts for ESMValTool and COSIMA recipes with intelligent resource allocation. Supports both generate-only mode and full execution with direct Gadi job submission.'
author: 'ESMValTool Community'

inputs:
  recipe_type:
    description: 'Type of recipe: esmvaltool or cosima'
    required: true
  recipe_name:
    description: 'Name of the recipe to run'
    required: true
  config:
    description: 'Recipe configuration (JSON string)'
    required: false
    default: '{}'
  esmvaltool_version:
    description: 'ESMValTool version to use (for esmvaltool recipes)'
    required: false
    default: 'main'
  conda_module:
    description: 'Conda module to load'
    required: false
    default: 'conda/analysis3'
  repository_url:
    description: 'Custom repository URL for cloning'
    required: false
  gadi_username:
    description: 'Gadi username for SSH connection'
    required: true
  gadi_ssh_key:
    description: 'SSH private key for Gadi connection'
    required: false
  gadi_ssh_passphrase:
    description: 'Passphrase for SSH private key (if password-protected)'
    required: false
  submit_job:
    description: 'Whether to submit the job to Gadi (true/false)'
    required: false
    default: 'false'
  scripts_dir:
    description: 'Directory on Gadi to upload scripts'
    required: false
    default: '/scratch/$USER/esmvaltool-ci'

outputs:
  status:
    description: 'Generation status (pbs-generated, job-submitted, or error)'
    value: ${{ steps.set-job-outputs.outputs.status || steps.generate-pbs.outputs.status }}
  pbs_filename:
    description: 'Generated PBS script filename'
    value: ${{ steps.generate-pbs.outputs.pbs_filename }}
  job_id:
    description: 'PBS job ID (if submitted)'
    value: ${{ steps.set-job-outputs.outputs.job_id }}
  gadi_path:
    description: 'Path to script on Gadi (if submitted)'
    value: ${{ steps.set-job-outputs.outputs.gadi_path }}

runs:
  using: 'composite'
  steps:
    - name: Setup Python Environment
      shell: bash
      run: |
        python -m pip install --upgrade pip
        python -m pip install pyyaml
        
    - name: Setup Smart Recipe Runner
      shell: bash
      run: |
        export PYTHONPATH="${PYTHONPATH}:${{ github.action_path }}/lib"
        echo "PYTHONPATH=${PYTHONPATH}" >> $GITHUB_ENV
        
    - name: Validate Inputs
      shell: bash
      run: |
        # Validate recipe type
        recipe_type="${{ inputs.recipe_type }}"
        if [[ "$recipe_type" != "esmvaltool" && "$recipe_type" != "cosima" ]]; then
          echo "‚ùå Invalid recipe_type: $recipe_type. Must be 'esmvaltool' or 'cosima'"
          exit 1
        fi
        
        # Validate recipe name
        if [[ -z "${{ inputs.recipe_name }}" ]]; then
          echo "‚ùå recipe_name is required"
          exit 1
        fi
        
        echo "‚úÖ Input validation passed"
        echo "Recipe type: $recipe_type"
        echo "Recipe name: ${{ inputs.recipe_name }}"
        
    - name: Generate PBS Script
      id: generate-pbs
      shell: bash
      run: |
        echo "üéØ Generating PBS script for ${{ inputs.recipe_type }} recipe: ${{ inputs.recipe_name }}"
        
        # Create simple PBS generation script
        cat > generate_pbs.py << 'EOF'
        import sys
        import os
        import json
        from pathlib import Path
        
        # Add lib directory to path
        sys.path.insert(0, os.path.join(os.environ.get('GITHUB_ACTION_PATH', '.'), 'lib'))
        
        try:
            from recipe_runner import SmartRecipeRunner
            
            # Create runner
            runner = SmartRecipeRunner()
            
            # Get parameters
            recipe_name = sys.argv[1]
            config_json = sys.argv[2] if len(sys.argv) > 2 else '{}'
            recipe_type = sys.argv[3] if len(sys.argv) > 3 else 'esmvaltool'
            esmvaltool_version = sys.argv[4] if len(sys.argv) > 4 else 'main'
            conda_module = sys.argv[5] if len(sys.argv) > 5 else 'conda/access-med'
            repository_url = sys.argv[6] if len(sys.argv) > 6 and sys.argv[6] != 'None' else None
            
            print(f"Parameters:")
            print(f"  Recipe: {recipe_name}")
            print(f"  Type: {recipe_type}")
            print(f"  Config: {config_json}")
            print(f"  ESMValTool version: {esmvaltool_version}")
            print(f"  Conda module: {conda_module}")
            print(f"  Repository URL: {repository_url}")
            
            # Generate PBS script
            result = runner.run(
                recipe_name=recipe_name,
                config_json=config_json,
                recipe_type=recipe_type,
                esmvaltool_version=esmvaltool_version,
                conda_module=conda_module,
                repository_url=repository_url
            )
            
            print(f"‚úÖ PBS generation completed: {result}")
            
            # Write outputs for GitHub Actions
            with open('pbs_result.txt', 'w') as f:
                f.write(f"status={result[0]}\n")
                f.write(f"pbs_filename={result[1]}\n")
                
        except Exception as e:
            print(f"‚ùå Error generating PBS script: {e}")
            import traceback
            traceback.print_exc()
            
            with open('pbs_result.txt', 'w') as f:
                f.write("status=error\n")
                f.write("pbs_filename=\n")
            sys.exit(1)
        EOF
        
        # Run PBS generation
        python generate_pbs.py \
          "${{ inputs.recipe_name }}" \
          "${{ inputs.config }}" \
          "${{ inputs.recipe_type }}" \
          "${{ inputs.esmvaltool_version }}" \
          "${{ inputs.conda_module }}" \
          "${{ inputs.repository_url }}"
        
        # Set outputs
        if [[ -f "pbs_result.txt" ]]; then
          while IFS= read -r line; do
            echo "$line" >> $GITHUB_OUTPUT
          done < pbs_result.txt
        else
          echo "status=error" >> $GITHUB_OUTPUT
          echo "pbs_filename=" >> $GITHUB_OUTPUT
        fi
        
    - name: Display Results
      shell: bash
      run: |
        echo "üìã PBS Script Generation Results:"
        echo "Status: ${{ steps.generate-pbs.outputs.status }}"
        echo "PBS Filename: ${{ steps.generate-pbs.outputs.pbs_filename }}"
        
        if [[ "${{ steps.generate-pbs.outputs.status }}" == "pbs-generated" ]]; then
          echo ""
          echo "‚úÖ PBS script generated successfully!"
          echo "üìÅ Script saved as: ${{ steps.generate-pbs.outputs.pbs_filename }}"
          
          if [[ -f "${{ steps.generate-pbs.outputs.pbs_filename }}" ]]; then
            echo ""
            echo "--- PBS Script Content Preview ---"
            head -20 "${{ steps.generate-pbs.outputs.pbs_filename }}"
            echo "..."
            echo "--- End Preview ---"
          fi
        else
          echo "‚ùå PBS script generation failed"
          exit 1
        fi

    - name: Read PBS Content for Upload
      id: read-pbs
      if: inputs.submit_job == 'true' && inputs.gadi_username != '' && inputs.gadi_ssh_key != ''
      shell: bash
      run: |
        if [[ -f "${{ steps.generate-pbs.outputs.pbs_filename }}" ]]; then
          echo "üìÑ Reading PBS content for upload to Gadi..."
          # Create a base64 encoded version for safe transfer
          PBS_B64=$(base64 -w 0 "${{ steps.generate-pbs.outputs.pbs_filename }}")
          echo "pbs_content_b64=$PBS_B64" >> $GITHUB_OUTPUT
          echo "‚úÖ PBS content prepared for upload"
        else
          echo "‚ùå PBS file not found: ${{ steps.generate-pbs.outputs.pbs_filename }}"
          exit 1
        fi

    - name: Clone Repository and Submit Job to Gadi
      id: submit-job
      if: inputs.submit_job == 'true' && inputs.gadi_username != '' && inputs.gadi_ssh_key != ''
      uses: appleboy/ssh-action@v1
      with:
        host: 'gadi.nci.org.au'
        username: ${{ inputs.gadi_username }}
        key: ${{ inputs.gadi_ssh_key }}
        passphrase: ${{ inputs.gadi_ssh_passphrase }}
        script: |
          set -e
          
          echo "üöÄ Preparing repository and submitting job to Gadi..."
          
          PBS_FILENAME="${{ steps.generate-pbs.outputs.pbs_filename }}"
          SCRIPTS_DIR="${{ inputs.scripts_dir }}"
          RECIPE_NAME="${{ inputs.recipe_name }}"
          RECIPE_TYPE="${{ inputs.recipe_type }}"
          REPOSITORY_URL="${{ inputs.repository_url }}"
          
          # Decode the PBS content
          echo "${{ steps.read-pbs.outputs.pbs_content_b64 }}" | base64 -d > /tmp/pbs_content.pbs
          
          echo "üìÅ Creating scripts directory: $SCRIPTS_DIR"
          mkdir -p "$SCRIPTS_DIR"
          
          # Clone/update repository before submitting job
          echo "üì¶ Setting up repository on Gadi login node (with internet access)..."
          cd "$SCRIPTS_DIR/../"
          
          if [[ "$RECIPE_TYPE" == "cosima" ]]; then
            REPO_URL="${REPOSITORY_URL:-https://github.com/COSIMA/cosima-recipes}"
            REPO_DIR="COSIMA-recipes-ci"
            echo "üîÑ Setting up COSIMA repository: $REPO_URL"
          else
            REPO_URL="${REPOSITORY_URL:-https://github.com/ESMValGroup/ESMValTool}"
            REPO_DIR="ESMValTool-ci"
            echo "üîÑ Setting up ESMValTool repository: $REPO_URL"
          fi
          
          if [ ! -d "$REPO_DIR" ]; then
            echo "ÔøΩ Cloning repository: $REPO_URL"
            git clone "$REPO_URL" "$REPO_DIR"
            if [ $? -eq 0 ]; then
              echo "‚úÖ Repository cloned successfully"
            else
              echo "‚ùå Failed to clone repository"
              exit 1
            fi
          else
            echo "üîÑ Repository exists, updating..."
            cd "$REPO_DIR"
            git fetch origin
            git pull origin main
            if [ $? -eq 0 ]; then
              echo "‚úÖ Repository updated successfully"
            else
              echo "‚ö†Ô∏è  Warning: Failed to update repository, continuing with existing version"
            fi
            cd ..
          fi
          
          echo "üìÇ Repository setup complete: $(pwd)/$REPO_DIR"
          
          echo "ÔøΩüì§ Creating PBS script on Gadi: $SCRIPTS_DIR/$PBS_FILENAME"
          cp /tmp/pbs_content.pbs "$SCRIPTS_DIR/$PBS_FILENAME"
          chmod +x "$SCRIPTS_DIR/$PBS_FILENAME"
          
          echo "üìã Submitting job with qsub..."
          cd "$SCRIPTS_DIR"
          JOB_OUTPUT=$(qsub "$PBS_FILENAME")
          
          # Extract job ID from qsub output
          JOB_ID=$(echo "$JOB_OUTPUT" | grep -oE '[0-9]+\.[a-zA-Z0-9]+' | head -1)
          
          echo "‚úÖ Job submitted successfully!"
          echo "Job ID: $JOB_ID"
          echo "PBS file: $SCRIPTS_DIR/$PBS_FILENAME"
          echo "Recipe: $RECIPE_NAME"
          echo "Repository: $(pwd)/../$REPO_DIR"
          
          # Write a simple status file for reference
          echo "job_id=$JOB_ID" > "$SCRIPTS_DIR/.job_status_$RECIPE_NAME.txt"
          echo "gadi_path=$SCRIPTS_DIR/$PBS_FILENAME" >> "$SCRIPTS_DIR/.job_status_$RECIPE_NAME.txt"
          echo "repository_path=$(pwd)/../$REPO_DIR" >> "$SCRIPTS_DIR/.job_status_$RECIPE_NAME.txt"
          echo "status=job-submitted" >> "$SCRIPTS_DIR/.job_status_$RECIPE_NAME.txt"
          echo "submission_time=$(date)" >> "$SCRIPTS_DIR/.job_status_$RECIPE_NAME.txt"
          
          echo "üìã Job submission completed"
          echo "Monitor with: qstat $JOB_ID"

    - name: Set Job Outputs
      id: set-job-outputs
      if: inputs.submit_job == 'true' && inputs.gadi_username != '' && inputs.gadi_ssh_key != ''
      shell: bash
      run: |
        # Since we can't easily get outputs from SSH action, we'll construct them
        # from the information we have. The actual job ID will be shown in the SSH action output.
        GADI_PATH="${{ inputs.scripts_dir }}/${{ steps.generate-pbs.outputs.pbs_filename }}"
        
        echo "job_id=check-ssh-output" >> $GITHUB_OUTPUT
        echo "gadi_path=$GADI_PATH" >> $GITHUB_OUTPUT
        echo "status=job-submitted" >> $GITHUB_OUTPUT
        
        echo "üìã Job information:"
        echo "Status: job-submitted"
        echo "Gadi Path: $GADI_PATH"
        echo "Note: Check the SSH action output above for the actual Job ID"

    - name: Display Final Results
      shell: bash
      run: |
        echo "üéØ Smart Recipe Runner - Final Results"
        echo "=================================="
        
        if [[ "${{ inputs.submit_job }}" == "true" ]]; then
          if [[ -n "${{ inputs.gadi_username }}" && -n "${{ inputs.gadi_ssh_key }}" ]]; then
            echo "üìã Job Submission Results:"
            echo "Status: ${{ steps.set-job-outputs.outputs.status || 'job-submitted' }}"
            echo "Gadi Path: ${{ steps.set-job-outputs.outputs.gadi_path }}"
            echo ""
            echo "‚úÖ Job has been submitted to Gadi HPC!"
            echo "üîç Check the SSH action output above for the Job ID"
            echo "üîç Monitor job status with: qstat [JOB_ID]"
          else
            echo "‚ö†Ô∏è  submit_job=true but missing gadi_username or gadi_ssh_key"
            echo "üìã PBS script generated but not submitted"
            echo "PBS file: ${{ steps.generate-pbs.outputs.pbs_filename }}"
          fi
        else
          echo "üìã PBS Script Generation Mode:"
          echo "Status: ${{ steps.generate-pbs.outputs.status }}"
          echo "PBS file: ${{ steps.generate-pbs.outputs.pbs_filename }}"
          echo ""
          echo "üí° To submit to Gadi, set submit_job=true and provide SSH credentials"
        fi
        
branding:
  icon: 'play-circle'
  color: 'blue'
