name: 'Smart Recipe Runner'
description: 'Intelligent ESMValTool recipe execution with automatic configuration management and HPC integration'
author: 'ESMValTool Workflow Team'

inputs:
  recipe:
    description: 'Recipe name to run (use "all" for matrix generation mode)'
    required: true
  mode:
    description: 'Execution mode: run-only (default), setup-and-run, config-check, or dry-run'
    required: false
    default: 'run-only'
  esmvaltool_version:
    description: 'ESMValTool version to use'
    required: false
    default: 'main'
  conda_module:
    description: 'Conda module to load'
    required: false
    default: 'conda/access-med'
  config_path:
    description: 'Path to repository configuration file'
    required: false
    default: '.github/config/repository-config.yml'
  force_config_regeneration:
    description: 'Force regeneration of configuration even if it exists'
    required: false
    default: 'false'
  recipe_directory:
    description: 'Path to directory containing recipes (for config generation)'
    required: false
    default: 'admin/ESMValTool/esmvaltool/recipes'
  # Matrix generation inputs
  generate_matrix:
    description: 'Generate execution matrix for multiple recipes (true/false)'
    required: false
    default: 'false'
  recipe_filter:
    description: 'Filter recipes by pattern (regex or comma-separated list)'
    required: false
    default: '.*'
  resource_filter:
    description: 'Filter by resource group (all, small, medium, large, extra-large)'
    required: false
    default: 'all'
  max_parallel:
    description: 'Maximum parallel executions for matrix jobs'
    required: false
    default: '8'
  hpc_system:
    description: 'Target HPC system (gadi, generic)'
    required: false
    default: 'gadi'
  project_name:
    description: 'HPC project name/allocation'
    required: false
    default: 'w40'
  storage_paths:
    description: 'HPC storage paths (comma-separated)'
    required: false
    default: 'gdata/kj13,gdata/fs38,gdata/oi10,gdata/rr3,gdata/xp65,gdata/al33,gdata/rt52,gdata/zz93,gdata/cb20'

outputs:
  status:
    description: 'Recipe execution status (success, failed, skipped, config-updated)'
    value: ${{ steps.execute.outputs.status }}
  job_id:
    description: 'PBS job ID if submitted'
    value: ${{ steps.execute.outputs.job_id }}
  log_url:
    description: 'URL to log artifact'
    value: ${{ steps.upload.outputs.artifact-url }}
  config_status:
    description: 'Configuration management status'
    value: ${{ steps.config-manager.outputs.status }}
  resource_group:
    description: 'Detected resource group for this recipe'
    value: ${{ steps.config-manager.outputs.resource_group }}
  # Matrix generation outputs
  matrix:
    description: 'Generated execution matrix (JSON format)'
    value: ${{ steps.matrix-generator.outputs.matrix }}
  total_recipes:
    description: 'Total number of recipes in generated matrix'
    value: ${{ steps.matrix-generator.outputs.total_recipes }}
  filtered_recipes:
    description: 'List of filtered recipe names'
    value: ${{ steps.matrix-generator.outputs.filtered_recipes }}

runs:
  using: 'composite'
  steps:
    - name: Setup Python Environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Dependencies
      shell: bash
      run: |
        pip install pyyaml dataclasses-json
    
    - name: Smart Configuration Management
      id: config-manager
      shell: bash
      run: |
        if [ "${{ inputs.generate_matrix }}" = "true" ] || [ "${{ inputs.recipe }}" = "all" ]; then
          # Matrix generation mode
          python3 "${{ github.action_path }}/lib/config-manager.py" \
            --recipe "${{ inputs.recipe }}" \
            --mode "${{ inputs.mode }}" \
            --config-path "${{ inputs.config_path }}" \
            --recipe-dir "${{ inputs.recipe_directory }}" \
            --force-regen "${{ inputs.force_config_regeneration }}" \
            --hpc-system "${{ inputs.hpc_system }}" \
            --project "${{ inputs.project_name }}" \
            --storage "${{ inputs.storage_paths }}" \
            --generate-matrix \
            --recipe-filter "${{ inputs.recipe_filter }}" \
            --resource-filter "${{ inputs.resource_filter }}" \
            --max-parallel "${{ inputs.max_parallel }}"
        else
          # Single recipe mode
          python3 "${{ github.action_path }}/lib/config-manager.py" \
            --recipe "${{ inputs.recipe }}" \
            --mode "${{ inputs.mode }}" \
            --config-path "${{ inputs.config_path }}" \
            --recipe-dir "${{ inputs.recipe_directory }}" \
            --force-regen "${{ inputs.force_config_regeneration }}" \
            --hpc-system "${{ inputs.hpc_system }}" \
            --project "${{ inputs.project_name }}" \
            --storage "${{ inputs.storage_paths }}"
        fi
    
    - name: Matrix Generation Output
      id: matrix-generator
      if: ${{ inputs.generate_matrix == 'true' || inputs.recipe == 'all' }}
      shell: bash
      run: |
        # The matrix outputs are set by the config-manager script
        echo "Matrix generation completed"
    
    - name: Recipe Execution
      id: execute
      if: ${{ steps.config-manager.outputs.should_run == 'true' && inputs.generate_matrix != 'true' && inputs.recipe != 'all' }}
      shell: bash
      run: |
        python3 "${{ github.action_path }}/lib/recipe-runner.py" \
          --recipe "${{ inputs.recipe }}" \
          --config "${{ steps.config-manager.outputs.recipe_config }}" \
          --esmvaltool-version "${{ inputs.esmvaltool_version }}" \
          --conda-module "${{ inputs.conda_module }}" \
          --mode "${{ inputs.mode }}"
    
    - name: Download Logs
      if: always() && steps.execute.outputs.job_submitted == 'true'
      uses: nicklasfrahm/scp-action@main
      with:
        direction: download
        host: gadi.nci.org.au
        username: ${{ env.GADI_USER }}
        insecure_ignore_fingerprint: true
        key: ${{ env.GADI_KEY }}
        source: /g/data/kj13/admin/ESMValTool/logs/${{ inputs.recipe }}-${{ inputs.esmvaltool_version }}.out
        target: ${{ inputs.recipe }}.log
      continue-on-error: true
    
    - name: Upload Logs
      id: upload
      if: always() && steps.execute.outputs.job_submitted == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: logs-${{ inputs.recipe }}-${{ inputs.esmvaltool_version }}-${{ github.run_id }}
        path: ${{ inputs.recipe }}.log
        retention-days: 30
      continue-on-error: true
    
    - name: Handle Success
      if: success() && steps.execute.outputs.status == 'success'
      uses: actions/github-script@v7
      with:
        github-token: ${{ env.GITHUB_TOKEN }}
        script: |
          const recipeName = '${{ inputs.recipe }}';
          const title = `Recipe: ${recipeName} failing`;
          
          // Close any existing failure issues
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: ['recipe-failure']
          });
          
          const existingIssue = issues.find(issue => issue.title === title);
          
          if (existingIssue) {
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: `âœ… Recipe is now working! Fixed in [workflow run](${runUrl})`
            });
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              state: 'closed'
            });
          }
    
    - name: Handle Failure
      if: failure() && steps.execute.outputs.job_submitted == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ env.GITHUB_TOKEN }}
        script: |
          const recipeName = '${{ inputs.recipe }}';
          const resourceGroup = '${{ steps.config-manager.outputs.resource_group }}';
          const title = `Recipe: ${recipeName} failing`;
          const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
          const jobId = '${{ steps.execute.outputs.job_id }}' || 'N/A';
          const submissionStatus = '${{ steps.execute.outputs.status }}' || 'unknown';
          const configStatus = '${{ steps.config-manager.outputs.status }}' || 'unknown';
          
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: ['recipe-failure']
          });
          
          const existingIssue = issues.find(issue => issue.title === title);
          
          const failureDetails = `
          **Failure Details:**
          - **Workflow Run**: [${context.runId}](${runUrl})
          - **Job ID**: ${jobId}
          - **Submission Status**: ${submissionStatus}
          - **Config Status**: ${configStatus}
          - **Resource Group**: ${resourceGroup}
          - **ESMValTool Version**: ${{ inputs.esmvaltool_version }}
          - **Timestamp**: ${new Date().toISOString()}
          
          **Diagnostics:**
          - Check the [workflow logs](${runUrl}) for detailed error information
          - Review PBS job logs on Gadi if job was submitted
          - Verify resource requirements and configuration
          `;
          
          if (!existingIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: `Recipe **${recipeName}** (${resourceGroup} group) failed in Smart Recipe Runner.
              
              ${failureDetails}
              
              This issue was automatically created by the CI system. It will be closed automatically when the recipe succeeds.`,
              labels: ['recipe-failure', recipeName, resourceGroup, 'automated', 'smart-runner']
            });
            console.log(`Created new failure issue for ${recipeName}`);
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: `ðŸ”„ Recipe failed again in [Smart Recipe Runner ${context.runId}](${runUrl})
              
              ${failureDetails}`
            });
            console.log(`Updated existing failure issue #${existingIssue.number} for ${recipeName}`);
          }

branding:
  icon: 'zap'
  color: 'purple'
