name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.2.3)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          
          # Check if this is a prerelease
          if [[ "${VERSION}" =~ -[a-zA-Z] ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi
          
          echo "Release version: ${VERSION}"
          echo "Is prerelease: $([ "${VERSION}" =~ -[a-zA-Z] ] && echo true || echo false)"
      
      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "${VERSION}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "‚ùå Invalid version format: ${VERSION}"
            echo "Expected format: vX.Y.Z or vX.Y.Z-prerelease"
            exit 1
          fi
          echo "‚úÖ Version format is valid"
      
      - name: Run tests
        uses: ./.github/workflows/test.yml

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: validate-release
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          echo "Generating changelog for ${VERSION}..."
          
          if [ -n "${PREVIOUS_TAG}" ]; then
            echo "Changes since ${PREVIOUS_TAG}:"
            CHANGELOG=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s" --no-merges)
          else
            echo "Initial release:"
            CHANGELOG=$(git log --pretty=format:"- %s" --no-merges | head -20)
          fi
          
          # Create changelog file
          cat > CHANGELOG_TEMP.md << EOF
          ## What's Changed
          
          ${CHANGELOG}
          
          **Full Changelog**: https://github.com/\${{ github.repository }}/compare/${PREVIOUS_TAG}...${VERSION}
          EOF
          
          echo "changelog_file=CHANGELOG_TEMP.md" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          release_name: ${{ needs.validate-release.outputs.version }}
          body_path: ${{ steps.changelog.outputs.changelog_file }}
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is_prerelease }}
      
      - name: Update major version tag
        if: ${{ needs.validate-release.outputs.is_prerelease == 'false' }}
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          MAJOR_VERSION=$(echo ${VERSION} | cut -d. -f1)
          
          echo "Updating major version tag: ${MAJOR_VERSION}"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Delete existing major version tag if it exists
          git tag -d ${MAJOR_VERSION} 2>/dev/null || true
          git push origin :refs/tags/${MAJOR_VERSION} 2>/dev/null || true
          
          # Create new major version tag
          git tag ${MAJOR_VERSION}
          git push origin ${MAJOR_VERSION}
          
          echo "‚úÖ Updated major version tag ${MAJOR_VERSION}"

  publish-action:
    name: Publish Action
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Validate action for marketplace
        run: |
          echo "üîç Validating action for GitHub Marketplace..."
          
          # Check required files
          required_files=("action.yml" "README.md" "LICENSE")
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Missing required file: $file"
              exit 1
            fi
            echo "‚úÖ Found $file"
          done
          
          # Validate action.yml structure
          python -c "
          import yaml
          with open('action.yml', 'r') as f:
              action = yaml.safe_load(f)
          
          required_fields = ['name', 'description', 'author', 'inputs', 'runs']
          for field in required_fields:
              if field not in action:
                  print(f'‚ùå Missing field in action.yml: {field}')
                  exit(1)
              print(f'‚úÖ Found {field}')
          
          print('‚úÖ action.yml is marketplace ready')
          "
      
      - name: Package action
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          echo "üì¶ Packaging Smart Recipe Runner ${VERSION}"
          
          # Create distribution directory
          mkdir -p dist
          
          # Copy essential files
          cp action.yml dist/
          cp -r lib dist/
          cp README.md dist/
          cp LICENSE dist/ 2>/dev/null || echo "No LICENSE file found"
          
          # Create archive
          tar -czf "smart-recipe-runner-${VERSION}.tar.gz" -C dist .
          
          echo "‚úÖ Action packaged successfully"
          ls -la *.tar.gz

  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, publish-action]
    if: always()
    steps:
      - name: Release Summary
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          IS_PRERELEASE="${{ needs.validate-release.outputs.is_prerelease }}"
          
          echo "üéâ Release Summary"
          echo "=================="
          echo "Version: ${VERSION}"
          echo "Prerelease: ${IS_PRERELEASE}"
          echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${VERSION}"
          
          if [ "${{ needs.create-release.result }}" = "success" ]; then
            echo "‚úÖ Release created successfully"
          else
            echo "‚ùå Release creation failed"
          fi
          
          if [ "${{ needs.publish-action.result }}" = "success" ]; then
            echo "‚úÖ Action published successfully"
          else
            echo "‚ùå Action publishing failed"
          fi
          
          echo ""
          echo "üìñ Usage:"
          echo "- uses: ACCESS-NRI/smart-recipe-runner@${VERSION}"
          echo "- uses: ACCESS-NRI/smart-recipe-runner@$(echo ${VERSION} | cut -d. -f1)"
